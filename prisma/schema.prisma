generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Settlements {
  id              String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  slug            String?
  description     String?
  published       Boolean                        @default(true)
  createdAt       DateTime                       @default(now())
  updatedAt       DateTime                       @updatedAt
  details         Details[]
  events          Events[]
  location        Locations?
  resources       Resources[]
  architects      SettlementsOnArchitects[]
  settlementTypes SettlementsOnSettlementTypes[]
  tags            SettlementsOnTags[]
}

model SettlementTypes {
  id          String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String                         @unique
  slug        String?
  description String?
  published   Boolean                        @default(true)
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt
  details     Details[]
  resources   Resources[]
  architects  SettlementTypesOnArchitects[]
  tags        SettlementTypesOnTags[]
  settlements SettlementsOnSettlementTypes[]
}

model Architects {
  id              String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  url             String?
  published       Boolean                       @default(true)
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  settlementTypes SettlementTypesOnArchitects[]
  settlements     SettlementsOnArchitects[]
}

model Details {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String?
  published        Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  detailTypeId     String           @db.Uuid
  settlementId     String?          @db.Uuid
  settlementTypeId String?          @db.Uuid
  detailType       DetailTypes      @relation(fields: [detailTypeId], references: [id])
  settlement       Settlements?     @relation(fields: [settlementId], references: [id])
  settlementType   SettlementTypes? @relation(fields: [settlementTypeId], references: [id])
}

model Events {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String?
  published    Boolean     @default(true)
  eventDate    DateTime?   @db.Timestamp(6)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  eventTypeId  String      @db.Uuid
  settlementId String      @db.Uuid
  eventType    EventTypes  @relation(fields: [eventTypeId], references: [id])
  settlement   Settlements @relation(fields: [settlementId], references: [id])
}

model Resources {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String?
  url              String
  source           String?
  license          String?
  copyright        String?
  published        Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  resourceTypeId   String           @db.Uuid
  settlementId     String?          @db.Uuid
  settlementTypeId String?          @db.Uuid
  resourceType     ResourceTypes    @relation(fields: [resourceTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlement       Settlements?     @relation(fields: [settlementId], references: [id])
  settlementType   SettlementTypes? @relation(fields: [settlementTypeId], references: [id])
}

model Locations {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  lat          Float       @default(0.0)
  lng          Float       @default(0.0)
  published    Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  settlementId String      @unique @db.Uuid
  settlement   Settlements @relation(fields: [settlementId], references: [id])
}

model Tags {
  id              String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String                  @unique
  description     String?
  published       Boolean                 @default(true)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  settlementTypes SettlementTypesOnTags[]
  settlements     SettlementsOnTags[]
}

model DetailTypes {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String?
  published   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  details     Details[]
}

model EventTypes {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique
  description String?
  published   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Events[]
}

model ResourceTypes {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique
  description String?
  published   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resources   Resources[]
}

model SettlementTypesOnArchitects {
  settlementTypeId String          @db.Uuid
  architectId      String          @db.Uuid
  architect        Architects      @relation(fields: [architectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlementType   SettlementTypes @relation(fields: [settlementTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementTypeId, architectId])
}

model SettlementTypesOnTags {
  settlementTypeId String          @db.Uuid
  tagId            String          @db.Uuid
  settlementType   SettlementTypes @relation(fields: [settlementTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag              Tags            @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementTypeId, tagId])
}

model SettlementsOnArchitects {
  settlementId String      @db.Uuid
  architectId  String      @db.Uuid
  architect    Architects  @relation(fields: [architectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlement   Settlements @relation(fields: [settlementId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementId, architectId])
}

model SettlementsOnSettlementTypes {
  settlementId     String          @db.Uuid
  settlementTypeId String          @db.Uuid
  settlement       Settlements     @relation(fields: [settlementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlementType   SettlementTypes @relation(fields: [settlementTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementId, settlementTypeId])
}

model SettlementsOnTags {
  settlementId String      @db.Uuid
  tagId        String      @db.Uuid
  settlement   Settlements @relation(fields: [settlementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tag          Tags        @relation(fields: [tagId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementId, tagId])
}
