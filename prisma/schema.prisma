generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Settlements {
  id             String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title          String?                       @db.String
  description    String?
  events         Events[]
  location       Locations?
  resources      Resources[]
  details        Details[]
  architects     SettlementsOnArchitects[]
  tags           SettlementsOnTags[]
  settlementType SettlementsOnSettlementType[]
  createdAt      DateTime                      @default(now())
  updatedAt      DateTime                      @updatedAt
}

model SettlementTypes {
  id          String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String                        @unique @db.String
  description String?
  resources   Resources[]
  details     Details[]
  createdAt   DateTime                      @default(now())
  updatedAt   DateTime                      @updatedAt
  architects  SettlementTypeOnArchitects[]
  tags        SettlementTypeOnTags[]
  settlements SettlementsOnSettlementType[]
}

model Architects {
  id             String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String                       @db.String
  createdAt      DateTime                     @default(now())
  updatedAt      DateTime                     @updatedAt
  settlementType SettlementTypeOnArchitects[]
  settlements    SettlementsOnArchitects[]
}

model Details {
  id                String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String           @db.String
  description       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  detailType        DetailTypes      @relation(fields: [detailTypesId], references: [id])
  detailTypesId     String           @db.Uuid
  settlements       Settlements?     @relation(fields: [settlementsId], references: [id])
  settlementsId     String?          @db.Uuid
  settlementTypes   SettlementTypes? @relation(fields: [settlementTypesId], references: [id])
  settlementTypesId String?          @db.Uuid
}

model Events {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String      @db.String
  description  String?
  event_date   DateTime?   @db.Timestamp(6)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  eventType    EventTypes  @relation(fields: [eventTypeId], references: [id])
  eventTypeId  String      @db.Uuid
  settlement   Settlements @relation(fields: [settlementId], references: [id])
  settlementId String      @db.Uuid
}

model Resources {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String           @db.String
  description      String?
  url              String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  resourceTypes    ResourceTypes    @relation(fields: [resourceTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resourceTypeId   String           @db.Uuid
  settlement       Settlements?     @relation(fields: [settlementId], references: [id])
  settlementId     String?          @db.Uuid
  settlementType   SettlementTypes? @relation(fields: [settlementTypeId], references: [id])
  settlementTypeId String?          @db.Uuid
}

model Locations {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String      @db.String
  lat          Float       @default(0)
  lng          Float       @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  settlement   Settlements @relation(fields: [settlementId], references: [id])
  settlementId String      @unique @db.Uuid
}

model Tags {
  id             String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String                 @unique @db.String
  description    String?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  settlementType SettlementTypeOnTags[]
  settlements    SettlementsOnTags[]
}

model DetailTypes {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  details     Details[]
}

model EventTypes {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events      Events[]
}

model ResourceTypes {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @unique @db.String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  resources   Resources[]
}

model SettlementTypeOnArchitects {
  settlementTypeId String          @db.Uuid
  architectsId     String          @db.Uuid
  architects       Architects      @relation(fields: [architectsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlementType   SettlementTypes @relation(fields: [settlementTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementTypeId, architectsId])
}

model SettlementTypeOnTags {
  settlementTypeId String          @db.Uuid
  tagsId           String          @db.Uuid
  settlementType   SettlementTypes @relation(fields: [settlementTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags             Tags            @relation(fields: [tagsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementTypeId, tagsId])
}

model SettlementsOnArchitects {
  settlementsId String      @db.Uuid
  architectsId  String      @db.Uuid
  architects    Architects  @relation(fields: [architectsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlements   Settlements @relation(fields: [settlementsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementsId, architectsId])
}

model SettlementsOnSettlementType {
  settlementsId    String          @db.Uuid
  settlementTypeId String          @db.Uuid
  settlementType   SettlementTypes @relation(fields: [settlementTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  settlements      Settlements     @relation(fields: [settlementsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementsId, settlementTypeId])
}

model SettlementsOnTags {
  settlementsId String      @db.Uuid
  tagsId        String      @db.Uuid
  settlements   Settlements @relation(fields: [settlementsId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags          Tags        @relation(fields: [tagsId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([settlementsId, tagsId])
}
